// react-native/UniversalTranslationSDK/android/build.gradle

buildscript {
  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:7.3.1'
  }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

def safeExtGet(prop, fallback) {
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

android {
  compileSdkVersion safeExtGet('compileSdkVersion', 34)

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  kotlinOptions {
    jvmTarget = "1.8"
  }

  defaultConfig {
    minSdkVersion safeExtGet('minSdkVersion', 21)
    targetSdkVersion safeExtGet('targetSdkVersion', 34)
    versionCode 1
    versionName "1.0"
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable 'GradleCompatible'
  }
}

repositories {
  mavenCentral()
  google()
  maven { url "https://jitpack.io" }

  def found = false
  def defaultDir = null
  def androidSourcesName = 'React Native sources'

  if (rootProject.ext.has('reactNativeAndroidRoot')) {
    defaultDir = rootProject.ext.get('reactNativeAndroidRoot')
  } else {
    defaultDir = new File(
      projectDir,
      '/../../../node_modules/react-native/android'
    )
  }

  if (defaultDir.exists()) {
    maven {
      url defaultDir.toString()
      name androidSourcesName
    }

    logger.info(":${project.name}:reactNativeAndroidRoot ${defaultDir.canonicalPath}")
    found = true
  } else {
    def parentDir = rootProject.projectDir

    1.upto(5, {
      if (found) return true
      parentDir = parentDir.parentFile

      def androidSourcesDir = new File(
        parentDir,
        'node_modules/react-native'
      )

      def androidPrebuiltBinaryDir = new File(
        parentDir,
        'node_modules/react-native/android'
      )

      if (androidPrebuiltBinaryDir.exists()) {
        maven {
          url androidPrebuiltBinaryDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidPrebuiltBinaryDir.canonicalPath}")
        found = true
      } else if (androidSourcesDir.exists()) {
        maven {
          url androidSourcesDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidSourcesDir.canonicalPath}")
        found = true
      }
    })
  }

  if (!found) {
    throw new GradleException(
      "${project.name}: unable to locate React Native android sources. " +
      "Ensure you have you installed React Native as a dependency in your project and try again."
    )
  }
}

dependencies {
  // React Native
  implementation 'com.facebook.react:react-native:+'
  
  // Kotlin
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
  
  // Include the Universal Translation SDK
  // Option 1: If SDK is a local module
  implementation project(':android:UniversalTranslationSDK')
  
  // Option 2: If SDK is published to Maven
  // implementation 'com.universaltranslation:encoder-sdk:1.0.0'
  
  // Required dependencies that might not be included transitively
  implementation 'com.squareup.okhttp3:okhttp:4.12.0'
  implementation 'com.google.code.gson:gson:2.10.1'
  implementation 'androidx.work:work-runtime-ktx:2.9.0'
}

// Optional publishing configuration (activates when PUBLISH_REPOSITORY_URL is provided)
apply plugin: 'maven-publish'

afterEvaluate {
  publishing {
    publications {
      release(MavenPublication) {
        groupId = findProperty('PUBLISH_GROUP_ID') ?: 'com.universaltranslation'
        artifactId = findProperty('PUBLISH_ARTIFACT_ID') ?: 'universal-translation-sdk-android'
        version = findProperty('PUBLISH_VERSION') ?: android.defaultConfig.versionName
        from components.release
        pom {
          name = 'Universal Translation SDK - Android'
          description = 'Android library for Universal Translation System'
          licenses { license { name = 'Apache-2.0'; url = 'http://www.apache.org/licenses/LICENSE-2.0' } }
        }
      }
    }
    if (findProperty('PUBLISH_REPOSITORY_URL')) {
      repositories {
        maven {
          url = uri(findProperty('PUBLISH_REPOSITORY_URL'))
          credentials {
            username = findProperty('mavenUsername') ?: System.getenv('MAVEN_USERNAME')
            password = findProperty('mavenPassword') ?: System.getenv('MAVEN_PASSWORD')
          }
        }
      }
    }
  }
}