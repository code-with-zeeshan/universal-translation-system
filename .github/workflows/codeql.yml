name: "CodeQL"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '30 5 * * 1'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: python
            os: ubuntu-latest
            build-mode: none
          
          - language: javascript-typescript
            os: ubuntu-latest
            build-mode: none
          
          - language: java-kotlin
            os: ubuntu-latest
            build-mode: manual
          
          - language: swift
            os: macos-latest
            build-mode: manual

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Python setup
    - name: Set up Python 3.10
      if: matrix.language == 'python'
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    # Initialize CodeQL
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}

    # ===== ANDROID/KOTLIN SETUP =====
    - name: Set up JDK 17
      if: matrix.language == 'java-kotlin'
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      if: matrix.language == 'java-kotlin'
      uses: android-actions/setup-android@v3

    # Fix Android project files and ensure Gradle plugin 
    - name: Fix Android Project
      if: matrix.language == 'java-kotlin'
      run: |
        cd android/UniversalTranslationSDK
        
        # Create settings.gradle
        echo 'rootProject.name = "UniversalTranslationSDK"' > settings.gradle
        
        # Create gradle.properties
        cat > gradle.properties << EOF
        android.useAndroidX=true
        android.enableJetifier=true
        org.gradle.jvmargs=-Xmx2048m
        kotlin.code.style=official
        EOF
        
        # Ensure buildscript block is present in build.gradle for com.android.library plugin
        if ! grep -q "com.android.tools.build:gradle" build.gradle; then
          sed -i '1i buildscript {\n repository {\n google()\n  mavenCentral()\n }\n dependencies {\n  classpath "com.android.tools.build:gradle:8.1.0"\n   classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.0"\n }\n\n' build.gradle
        fi

        # Fix build.gradle - add kotlin version at the top if not already present
        if ! grep -q "kotlin_version" build.gradle; then
          sed -i '1i ext.kotlin_version = "1.9.0"' build.gradle
        fi  
        
        # Create local.properties
        echo "sdk.dir=${ANDROID_SDK_ROOT}" > local.properties
        
        # Setup gradle wrapper
        mkdir -p gradle/wrapper
        
        # Download gradle wrapper
        curl -L https://services.gradle.org/distributions/gradle-8.5-bin.zip -o gradle-8.5-bin.zip
        unzip -q gradle-8.5-bin.zip
        cp gradle-8.5/lib/gradle-wrapper-*.jar gradle/wrapper/gradle-wrapper.jar
        rm -rf gradle-8.5*
        
        # Create gradle wrapper properties
        cat > gradle/wrapper/gradle-wrapper.properties << EOF
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-8.5-bin.zip
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOF
        
        # Create gradlew script
        cat > gradlew << 'EOF'
        #!/bin/sh
        exec gradle "$@"
        EOF
        chmod +x gradlew

    # Build Android
    - name: Build Android
      if: matrix.language == 'java-kotlin'
      run: |
        cd android/UniversalTranslationSDK
        # Try direct gradle command since wrapper might not work
        gradle assembleDebug --no-daemon --stacktrace || true
      env:
        JAVA_HOME: ${{ env.JAVA_HOME_17_X64 }}

    # ===== iOS/SWIFT SETUP =====
    - name: Select Xcode
      if: matrix.language == 'swift'
      run: |
        # List available Xcode versions
        ls -la /Applications/ | grep Xcode || true
        
        # Try different Xcode versions
        sudo xcode-select -s /Applications/Xcode_15.2.app/Contents/Developer 2>/dev/null || \
        sudo xcode-select -s /Applications/Xcode_15.0.app/Contents/Developer 2>/dev/null || \
        sudo xcode-select -s /Applications/Xcode_14.3.1.app/Contents/Developer 2>/dev/null || \
        sudo xcode-select -s /Applications/Xcode.app/Contents/Developer 2>/dev/null || \
        echo "Using default Xcode"
        
        # Show selected version
        xcodebuild -version

    # Build iOS
    - name: Build iOS
      if: matrix.language == 'swift'
      run: |
        cd ios/UniversalTranslationSDK
        
        # Create a minimal Package.resolved to handle dependencies
        cat > Package.resolved << 'EOF'
        {
          "pins" : [
            {
              "identity" : "swift-log",
              "kind" : "remoteSourceControl",
              "location" : "https://github.com/apple/swift-log.git",
              "state" : {
                "revision" : "32e8d724467f8fe623624570367e3d50c5638e46",
                "version" : "1.5.0"
              }
            }
          ],
          "version" : 2
        }
        EOF
        
        # Try to build with Swift Package Manager
        swift build --target UniversalTranslationSDK || true
        
        # Alternative: try to build specific files
        swiftc -parse Sources/*.swift || true

    # Autobuild for Python and JavaScript
    - name: Autobuild
      if: matrix.build-mode == 'none'
      uses: github/codeql-action/autobuild@v3

    # Perform CodeQL Analysis
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"